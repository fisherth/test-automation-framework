# The name of the application
testautomationframework.application.name = ultimateqa

# The hostname of the application
testautomationframework.application.hostname = https://ultimateqa.com/simple-html-elements-for-automation/

# The build number of the application. This should match the label placed on the deployed code.
testautomationframework.application.build = 0.0.1

# The environment to run the tests in. Valid values are dev, test, stage, uat
testautomationframework.environment = test

# The browser used to run UI tests
testautomationframework.browser = chrome

# Place where credentials are stored
# "WINDOWS" for Windows Credential Manager is the only supported value
testautomationframework.credentialManager.provider = WINDOWS

# Some browsers allow you to pass startup arguments to them. Screen size and headless are some commons ones, but there are many available for each browser.
# At this time, the framework only accepts arguments for chrome and firefox. Specify them in the following format:
#
# testautomationframework.browser.argument.<argument-name>.<browser>
#
# <argument-name> should match an argument accepted by a browser. A list of valid chrome properties are at https://peter.sh/experiments/chromium-command-line-switches/, firefox arguments are at https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options.
# <browser> should be one of chrome or firefox
# 
# Uncomment the following and add others as needed:
# testautomationframework.browser.argument.--start-maximized.chrome 
# testautomationframework.browser.argument.--headless.chrome
# testautomationframework.browser.argument.--window-size.chrome = 1024,768 
# testautomationframework.browser.argument.-headless.firefox
# testautomationframework.browser.argument.-private-window.firefox = era.nih.gov
# testautomationframework.browser.argument.-width.firefox = 1024
# testautomationframework.browser.argument.-height.firefox = 768



# The framework tries to automatically discover the installation path of browsers. You can change this behavior by providing the exact location for the browser, 
# specified by properties in the following format:
#
# testautomationframework.browser.path.<browser> = 
#
# Valid values for <browser> are chrome, firefox, ie, edge, safari. Uncomment the following as needed:
# testautomationframework.browser.path.chrome = 
# testautomationframework.browser.path.firefox = 
# testautomationframework.browser.path.edge = 
# testautomationframework.browser.path.safari = 

# The type of web driver to use. Valid values are local, remote. If the value is remote, the framework will run the browser
# in the remote location specified by the testautomationframework.webdriver.remote.url property.
testautomationframework.webdriver.type = local

# The framework tries to automatically manage the installation of the web drivers and keep them in sync with the versions of the browsers installed. 
# You can change this behavior by specifying the exact location for the web driver of the browser specified in the following format:
#
# testautomationframework.webdriver.path.<browser> = 
#
# Valid values for <browser> are chrome, firefox, ie, edge, safari. Uncomment the following as needed:
# testautomationframework.webdriver.path.chrome = 
# testautomationframework.webdriver.path.firefox = 
# testautomationframework.webdriver.path.edge = 
# testautomationframework.webdriver.path.safari = 

# The connection information if you running your UI tests remotely.
# testautomationframework.webdriver.remote.url = 
# testautomationframework.webdriver.remote.credentialManagerKey = 

# Controls when to take a screenshot in scenarios tagged with "@ui"
# If set to true, a screenshot will be taken after each step in a scenario.
# If set to false, a screenshot will be taken after the failed step in a scenario.
testautomationframework.screenshot.eachstep = false

# Key to access the username and password used to log into the application from a Credential Manager
testautomationframework.login.credentialManagerKey=

# The framework allows for the configuration of any number of relational databases (see com.notsruht.taf.db.TAFDatasource), and they
# should all be Spring managed beans. 
#
# Properties should be specified in the following format:
# testautomationframework.datasource.<database-name>.<configuration-property-name>.<environment>
#
# <database-name> can be any name
# <configuration-property-name> should be any combination of the attributes listed at https://tomcat.apache.org/tomcat-9.0-doc/jdbc-pool.html#Attributes
# <environment> should match the value specified in the testautomationframework.environment property.
#
# For example, the connection information for the TEST anyname database should look like:
#
# testautomationframework.datasource.anyname.url.test = jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=db.url)(PORT=8888)))(CONNECT_DATA=(SERVICE_NAME=anynamedb)))
# testautomationframework.datasource.anyname.driverClass.test = oracle.jdbc.driver.OracleDriver
# testautomationframework.datasource.anyname.credentialManagerKey.test=ANYNAMETST
# testautomationframework.datasource.anyname.maxActive.test = 2
#
# Jdbc database connection strings for each database in each environment are listed in the tnsnames file
#
testautomationframework.datasource.anyname.url.test = 
testautomationframework.datasource.anyname.driverClass.test = 
testautomationframework.datasource.anyname.credentialManagerKey.test=
testautomationframework.datasource.anyname.maxActive.test = 2
